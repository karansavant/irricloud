var BIOS = xdc.useModule('ti.sysbios.BIOS');
var System = xdc.useModule('xdc.runtime.System');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Boot = xdc.useModule('ti.catalog.arm.cortexm4.tiva.ce.Boot');
var Memory = xdc.useModule('xdc.runtime.Memory');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Text = xdc.useModule('xdc.runtime.Text');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/* System stack size (used by ISRs and Swis) */
Program.stack = 15096;

/*
 * Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 2;

/*
 * Comment this line to allow Error, Assert, and Log strings to be
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 20048;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.swiEnabled = false;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

/* No memory allocation occurs, so no heap is needed */
BIOS.heapSize = 10048;//0x1400;

/* No runtime stack checking is performed */
Task.checkStackFlag = false;

/* Reduce the number of task priorities */
Task.numPriorities = 16;


/* Remove the Idle Task */
Task.enableIdleTask = true;

var WiFi = xdc.useModule('ti.drivers.WiFi');
WiFi.deviceType = WiFi.DeviceType_SimpleLink_CC3100;
WiFi.libType = WiFi.LibType_NonInstrumented;


/* ================ HTTP configuration ================ */
var Http = xdc.useModule('ti.net.http.Http');
Http.networkStack = Http.SimpleLink;

/* ================ Task configuration ================ */
var task0Params = new Task.Params();
task0Params.instance.name = "GSM_Mode";
task0Params.priority = 4;
task0Params.stackSize = 40048;
Program.global.GSM_Mode = Task.create("&GSM_Task", task0Params);

var task3Params = new Task.Params();
task3Params.instance.name = "Modbus";
task3Params.priority = 2;
task3Params.stackSize = 20048;
Program.global.Modbus = Task.create("&Modbus_Task", task3Params);

var task1Params = new Task.Params();
task1Params.instance.name = "GUI";
task1Params.stackSize = 20048;
task1Params.priority = 2;
Program.global.GUI = Task.create("&GUI_Task", task1Params);

var task2Params = new Task.Params();
task2Params.instance.name = "Program_Mode";
task2Params.priority = 1;
task2Params.stackSize = 20048;
Program.global.Program_Mode = Task.create("&Program_Task", task2Params);

//$$NR$$//dated:6Feb16
Clock.swiPriority = 4;
var clock1Params = new Clock.Params();
clock1Params.instance.name = "periodic1msec";
clock1Params.startFlag = true;
clock1Params.period = 1;
Program.global.periodic1msec = Clock.create("&periodic_1msec", 1, clock1Params);
//$$NR$$//dated:6Feb16

Clock.swiPriority = 4;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "periodicisr";
clock0Params.startFlag = true;
clock0Params.period = 10;
Program.global.periodicisr = Clock.create("&periodic_isr", 10, clock0Params);
Clock.tickPeriod = 1000;

var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
TIRTOS.useUART = true;
TIRTOS.useSPI = true;
TIRTOS.useI2C = true;
TIRTOS.useWatchdog = true;
TIRTOS.useEMAC = true;
TIRTOS.useUSBMSCHFatFs = true;

WiFi.spawnTaskPriority = 4;
Semaphore.supportsEvents = true;
